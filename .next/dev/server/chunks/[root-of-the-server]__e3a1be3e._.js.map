{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["file:///D:/cloud-resource-manager/pages/api/createShare.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\r\n\r\nconst SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL\r\nconst SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== 'POST') {\r\n    return res.status(405).json({ error: 'Method not allowed' })\r\n  }\r\n\r\n  if (!SERVICE_ROLE_KEY || !SUPABASE_URL) {\r\n    return res.status(500).json({ error: 'Server not configured' })\r\n  }\r\n\r\n  const { path, expires = 60 * 60 } = req.body || {}\r\n  if (!path || typeof path !== 'string') {\r\n    return res.status(400).json({ error: 'Missing path' })\r\n  }\r\n\r\n  // Expect Authorization: Bearer <access_token>\r\n  const authHeader = req.headers.authorization || ''\r\n  const token = authHeader.split(' ')[1]\r\n  if (!token) {\r\n    return res.status(401).json({ error: 'Missing user token' })\r\n  }\r\n\r\n  // Use service role client to validate token and create signed URL\r\n  const svc = createClient(SUPABASE_URL, SERVICE_ROLE_KEY)\r\n\r\n  try {\r\n    // Validate token and get user\r\n    const { data: userData, error: userErr } = await svc.auth.getUser(token)\r\n    if (userErr || !userData?.user) {\r\n      return res.status(401).json({ error: 'Invalid token' })\r\n    }\r\n    const user = userData.user\r\n\r\n    // Ensure the path belongs to this user (basic check)\r\n    if (!path.startsWith(`${user.id}/`)) {\r\n      return res.status(403).json({ error: 'Not authorized to share this file' })\r\n    }\r\n\r\n    const { data, error } = await svc.storage.from('uploads').createSignedUrl(path, expires)\r\n    if (error || !data?.signedURL) {\r\n      return res.status(500).json({ error: 'Could not create signed URL' })\r\n    }\r\n\r\n    return res.status(200).json({ url: data.signedURL })\r\n  } catch (err) {\r\n    return res.status(500).json({ error: (err && err.message) || String(err) })\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM;AACN,MAAM,mBAAmB,QAAQ,GAAG,CAAC,yBAAyB;AAE/C,eAAe,QAAQ,GAAG,EAAE,GAAG;IAC5C,IAAI,IAAI,MAAM,KAAK,QAAQ;QACzB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAqB;IAC5D;IAEA,IAAI,CAAC,oBAAoB,CAAC,cAAc;QACtC,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAwB;IAC/D;IAEA,MAAM,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,EAAE,GAAG,IAAI,IAAI,IAAI,CAAC;IACjD,IAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;QACrC,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAe;IACtD;IAEA,8CAA8C;IAC9C,MAAM,aAAa,IAAI,OAAO,CAAC,aAAa,IAAI;IAChD,MAAM,QAAQ,WAAW,KAAK,CAAC,IAAI,CAAC,EAAE;IACtC,IAAI,CAAC,OAAO;QACV,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAqB;IAC5D;IAEA,kEAAkE;IAClE,MAAM,MAAM,IAAA,iKAAY,EAAC,cAAc;IAEvC,IAAI;QACF,8BAA8B;QAC9B,MAAM,EAAE,MAAM,QAAQ,EAAE,OAAO,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC;QAClE,IAAI,WAAW,CAAC,UAAU,MAAM;YAC9B,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;YAAgB;QACvD;QACA,MAAM,OAAO,SAAS,IAAI;QAE1B,qDAAqD;QACrD,IAAI,CAAC,KAAK,UAAU,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC,GAAG;YACnC,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;YAAoC;QAC3E;QAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,OAAO,CAAC,IAAI,CAAC,WAAW,eAAe,CAAC,MAAM;QAChF,IAAI,SAAS,CAAC,MAAM,WAAW;YAC7B,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;YAA8B;QACrE;QAEA,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,KAAK,KAAK,SAAS;QAAC;IACpD,EAAE,OAAO,KAAK;QACZ,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO,AAAC,OAAO,IAAI,OAAO,IAAK,OAAO;QAAK;IAC3E;AACF","debugId":null}}]
}