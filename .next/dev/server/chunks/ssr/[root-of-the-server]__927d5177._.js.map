{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///D:/cloud-asset-hub/lib/supabaseClient.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,IAAA,iKAAY,EAAC,aAAa","debugId":null}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///D:/cloud-asset-hub/pages/reset-password.js"],"sourcesContent":["// pages/reset-password.js\r\nimport { useState, useEffect } from 'react';\r\nimport { supabase } from '../lib/supabaseClient';\r\nimport { useRouter } from 'next/router';\r\nimport Link from 'next/link';\r\n\r\nfunction ResetPassword() {\r\n  const router = useRouter();\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(null);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  \r\n  // State to check if a valid session was established from the email link\r\n  const [session, setSession] = useState(false); // Start as false to ensure check runs\r\n\r\n  // Check for a Supabase session established via the email link\r\n  useEffect(() => {\r\n    supabase.auth.getSession().then(({ data: { session } }) => {\r\n      if (session) {\r\n        setSession(true); // Valid session found\r\n      } else {\r\n        // If no session, the link is invalid, expired, or hasn't loaded yet.\r\n        setError(\"Error: Invalid or expired password reset link. Please try initiating the reset again.\");\r\n        setSession(false);\r\n      }\r\n    }).catch(() => {\r\n        setError(\"Could not verify reset link. Please try again.\");\r\n        setSession(false);\r\n    });\r\n  }, []);\r\n\r\n  // Handler to update the password using the temporary session\r\n  const handlePasswordUpdate = async (e) => {\r\n    e.preventDefault();\r\n    setError(null);\r\n    setSuccess(null);\r\n\r\n    if (newPassword !== confirmPassword) {\r\n      setError(\"Passwords do not match.\");\r\n      return;\r\n    }\r\n    if (newPassword.length < 6) {\r\n      setError(\"Password must be at least 6 characters long.\");\r\n      return;\r\n    }\r\n    if (!session) {\r\n        setError(\"Reset session expired or invalid. Please re-request the link.\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      // supabase.auth.updateUser uses the temporary session from the URL to change the password\r\n      const { error: updateError } = await supabase.auth.updateUser({ password: newPassword });\r\n\r\n      if (updateError) throw updateError;\r\n\r\n      setSuccess(\"Password updated successfully! Redirecting to login...\");\r\n      \r\n      // Redirect to login page after a short delay\r\n      setTimeout(() => {\r\n        router.push('/'); \r\n      }, 2000);\r\n\r\n    } catch (error) {\r\n      setError(\"Failed to update password: \" + error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const renderContent = () => {\r\n    // Show success message first\r\n    if (success) {\r\n      return <div className=\"success\">{success}</div>;\r\n    }\r\n\r\n    // Show persistent error message if session failed\r\n    if (error && !session) {\r\n      return (\r\n        <>\r\n          <div className=\"error\">{error}</div>\r\n          <p className=\"signup-text\"><Link href=\"/\">Go back to Login</Link></p>\r\n        </>\r\n      );\r\n    }\r\n\r\n    // Show form if session is confirmed (true)\r\n    if (session) {\r\n        return (\r\n          <form onSubmit={handlePasswordUpdate}>\r\n            {error && <div className=\"error\">{error}</div>}\r\n\r\n            <div className=\"form-group\">\r\n              <label>New Password</label>\r\n              <div className=\"password-input\">\r\n                <input\r\n                  type={showPassword ? \"text\" : \"password\"}\r\n                  placeholder=\"••••••••\"\r\n                  value={newPassword}\r\n                  onChange={(e) => setNewPassword(e.target.value)}\r\n                  disabled={loading}\r\n                  required\r\n                />\r\n                 <button\r\n                    type=\"button\"\r\n                    className=\"password-toggle\"\r\n                    onClick={() => setShowPassword(!showPassword)}\r\n                >\r\n                    {showPassword ? (\r\n                        <svg width=\"22\" height=\"22\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21\" />\r\n                        </svg>\r\n                    ) : (\r\n                        <svg width=\"22\" height=\"22\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\r\n                        </svg>\r\n                    )}\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label>Confirm Password</label>\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"••••••••\"\r\n                value={confirmPassword}\r\n                onChange={(e) => setConfirmPassword(e.target.value)}\r\n                disabled={loading}\r\n                required\r\n              />\r\n            </div>\r\n\r\n            <button type=\"submit\" className=\"login-btn\" disabled={loading}>\r\n              {loading ? 'Updating...' : 'Set New Password'}\r\n            </button>\r\n          </form>\r\n        );\r\n    }\r\n\r\n    // Default loading state\r\n    return <div className=\"success\">Verifying secure link...</div>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-page\">\r\n      <div className=\"login-container\">\r\n        <div className=\"login-header\">\r\n          <div className=\"login-icon\">\r\n            <svg width=\"24\" height=\"24\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\r\n            </svg>\r\n          </div>\r\n          <h1>Set New Password</h1>\r\n          <p>Please enter your new secure password</p>\r\n        </div>\r\n        \r\n        {renderContent()}\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResetPassword;"],"names":[],"mappings":"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","debugId":null}}]
}